[["index.html", "Mass cytof/flow pipeline in R About", " Mass cytof/flow pipeline in R Kei Onn,Lai 2025-04-15 About Tick tock tick tock… have you been gating for the past 10 days sieving through multiple .fcs files and secretly wished theres a quicker method than flowjo? Well then, here’s it for you! it may not be the best method out there so do your own diligence in the QC parts! especially the gating plots. But i reckon that it will be easier sieving through flowjo windows. Written by someone, whose mentor says ‘hates flowjo’ since 2019 "],["batchgating-with-.wsp-template.html", "Chapter 1 Batchgating with .wsp template 1.1 getting your filepaths", " Chapter 1 Batchgating with .wsp template The goal here is to populate your existing gating strategy from a flowjo workspace to your ungated .fcs files using available bioconductor flow packages 1.1 getting your filepaths Here we define the filepaths of your fcs In this example the subdirs are batchdates of when the masscytof/flow is being ran these are the dates which i can retrieve from a meta datafile basename() is essentially everything after the last \\ which is the name of your subdir maindir=getwd() #REPLACE THIS WITH THE METADATA CSV FILE OF YOUR OWN meta&lt;-read.csv(&#39;./allparticipants_meta.csv&#39;) names(meta)[1]&lt;-&#39;ID&#39; names(meta) #here get the batch names subdir subdirs &lt;- list.dirs(maindir, recursive = FALSE) #any pattern naming required to retrieve just fcs files all_files &lt;- list.files(subdirs, pattern = &quot;_cleaned\\\\.fcs$&quot;, full.names = TRUE) file_names &lt;- basename(all_files) file_subdirs &lt;- basename(dirname(all_files)) meta$subdir&lt;- NA_character_;meta$filename &lt;- NA_character_ for (i in seq_len(nrow(meta))) { id &lt;- meta$ID[i] # Match files starting with the ID col which is found in your metadata csv matched_idx &lt;- grep(paste0(&quot;^&quot;, id), file_names) if (length(matched_idx) == 1) { meta$filename[i] &lt;- file_names[matched_idx] meta$subdir[i] &lt;- file_subdirs[matched_idx] } else if (length(matched_idx) &gt; 1) { warning(sprintf(&quot;Multiple matches for ID &#39;%s&#39;. Taking the first.&quot;, id)) meta$filename[i] &lt;- file_names[matched_idx[1]] meta$subdir[i] &lt;- file_subdirs[matched_idx[1]] } else { warning(sprintf(&quot;No file match found for ID &#39;%s&#39;&quot;, id)) } } "],["importing-the-gating-template.html", "Chapter 2 Importing the gating template 2.1 Visualisation", " Chapter 2 Importing the gating template Here we assume that you have a flowjo workspace consisting of at least 1 sample which is gated. Using open_flowjo_xml you are importing the flowjo workspace into R. The arg name=1 meaning that it only imports the first sample into R this function is from CytoML Currently, the best way to download CytoML (without the docker image) is through bioconductor. However, this limits us in terms of exporting the gating set (gs) from R to flowjo. library(flowWorkspace) library(openCyto) library(CytoML) library(ggcyto) library(grid) library(gridExtra) setwd(&#39;C:\\Users\\Kei Onn\\Desktop\\pipeline_masscytof_latest&#39;) wsp &lt;- list.files(&quot;.&quot;, pattern = &quot;test09-Apr-2025.wsp$&quot;) ws&lt;-open_flowjo_xml(paste0(getwd(), &quot;/&quot;, wsp), name = 1, sample_names_from = &quot;sampleNode&quot;) 2.1 Visualisation Here we need a sanity check to see that the gating template which you imported from flowjo is not empty! Again I am only creating a gating set (which is synonymous as your group gating template in flowjo) so name=1 gs &lt;- flowjo_to_gatingset(ws, name = 1,emptyValue = FALSE) par(mar = c(4, 4, .1, .1)) plot(gs) "],["applying-gates-to-your-fcs-file-paths.html", "Chapter 3 Applying gates to your fcs file paths", " Chapter 3 Applying gates to your fcs file paths Here we will be applying the gate you created using flowjo_to_gatingset() to the fcs file paths of your interest. Again I am selecting gs[[1]] meaning the first sample of my gating set gating_applied&lt;-flowWorkspace::gh_apply_to_new_fcs(gs[[1]], all_files,emptyValue=F) Here we are checking the output of a single fcs file after applying the gate gs_pop_get_count_with_meta(gating_applied[[1]],&#39;freq&#39;) res&lt;-autoplot(gating_applied[[1]]) qcp &lt;- ggcyto_arrange(res, nrow = 5) And finally.. we are doing the loop for all files Note that for here I am extracting the population statistics via gs_pop_get_count_with_meta() for flowWorkspace, the argument freq refers to freq against all the cells, and not just the direct parent population(unlike flowjo). Therefore, i usually retrieve countinstead and normalize against my parent of interest pop_stats_df_list &lt;- list() #replace with any title you want pdf(&quot;all_gating_qc_plots_WITHOUTVERI.pdf&quot;, width = 12, height = 8) for (i in seq_along(gating_applied)) { gs &lt;- gating_applied[[i]] sample_name &lt;- sampleNames(gs)[1] res &lt;- autoplot(gs) qcp &lt;- ggcyto_arrange(res, nrow = 5) grid.newpage() grid.text(sample_name, x = 0.5, y = 0.98, gp = gpar(fontsize = 16, fontface = &quot;bold&quot;)) pushViewport(viewport(y = 0.45, height = 0.9)) grid.draw(qcp) popViewport() pop_stats_i &lt;- as.data.frame(gs_pop_get_count_with_meta(gs, &quot;count&quot;)) pop_stats_df_list[[i]] &lt;- pop_stats_i } dev.off() names(pop_stats_df_list)&lt;-sampleNames(gating_applied) conversion to dataframe pop_stats_df&lt;-imap_dfr(pop_stats_df_list, ~ mutate(.x, Sample = .y)) head(pop_stats_df) Annd… thats it! I think it really important to QC the output from the pdf where you can eyeball if there is any weird discrepancies from the batch gating. Also to note, sometimes there may be sample to sample variation so if the gates doesnt work, we need to refine them from the wsp. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
